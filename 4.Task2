import SwiftUI

struct Task2View: View {
    @State private var ratings: [Int] = [1, 1, 1]

    let statements = [
        "I find myself doing things without paying attention",
        "I am easily distracted and lose track of what Iâ€™m doing.",
        "I could be experiencing some emotion and not be conscious of it until later"
    ]
    
    var body: some View {
        VStack(spacing: 24) {
            Spacer().frame(height: 16)
            Text("Task 2")
                .font(.headline)
                .padding(.bottom, 2)
            Text("Rate each statement (e.g. 1 = Almost Always to 6 = Almost Never)")
                .font(.subheadline)
                .multilineTextAlignment(.center)
                .padding(.horizontal)
            
            ForEach(0..<statements.count, id: \.self) { index in
                VStack(spacing: 10) {
                    Text(statements[index])
                        .multilineTextAlignment(.center)
                        .padding()
                        .background(Color(.systemGray6))
                        .cornerRadius(8)
                    
                    Picker("", selection: $ratings[index]) {
                        ForEach(1...6, id: \.self) { num in
                            Text("\(num)").tag(num)
                        }
                    }
                    .pickerStyle(SegmentedPickerStyle())
                    .padding(.horizontal)
                }
            }
            
            Spacer()
            Button(action: {
                // Handle Next press
            }) {
                Text("Next")
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(Color(.systemGray3))
                    .cornerRadius(10)
            }
            .padding(.horizontal)
            .padding(.bottom)
        }
        .background(Color(.systemGroupedBackground))
        .edgesIgnoringSafeArea(.all)
    }
}

struct Task2View_Previews: PreviewProvider {
    static var previews: some View {
        Task2View()
    }
}

